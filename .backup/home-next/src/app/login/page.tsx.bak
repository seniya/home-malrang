// "use client"

// import Link from 'next/link'
// import { headers } from 'next/headers'
// import { createClient } from '@/utils/supabase/server'
// import { redirect } from 'next/navigation'

import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { z } from 'zod'

import { Button } from '@/components/ui/button'
// import {
//   Card,
//   CardContent,
//   CardDescription,
//   CardFooter,
//   CardHeader,
//   CardTitle
// } from '@/components/ui/card'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
// import { Label } from '@/components/ui/label'
// import { SubmitButton } from '@/app/login/submit-button'

const formSchema = z.object({
  email: z.string().email(),
  password: z.string().min(4, {
    message: 'password must be at least 4 characters.'
  })
})

export default function PageLogin({
  searchParams
}: {
  searchParams: { message: string }
}) {
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: ''
    }
  })

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // âœ… This will be type-safe and validated.
    console.log(values)
  }

  // const signIn = async (formData: FormData) => {
  //   'use server'

  //   const email = formData.get('email') as string
  //   const password = formData.get('password') as string
  //   const supabase = createClient()

  //   console.log('email', email)
  //   console.log('password', password)

  //   const { error } = await supabase.auth.signInWithPassword({
  //     email,
  //     password
  //   })

  //   if (error) {
  //     return redirect('/login?message=Could not authenticate user')
  //   }

  //   return redirect('/setting')
  // }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder="shadcn" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>

    // <Card className="w-full max-w-sm">
    //   <form>
    //     <CardHeader>
    //       <CardTitle className="text-2xl">Login</CardTitle>
    //       <CardDescription>
    //         Enter your email below to login to your account.
    //       </CardDescription>
    //     </CardHeader>
    //     <CardContent className="grid gap-4">
    //       <div className="grid gap-2">
    //         <Label htmlFor="email">Email</Label>
    //         <Input
    //           id="email"
    //           type="email"
    //           name="email"
    //           placeholder="m@example.com"
    //           required
    //         />
    //       </div>
    //       <div className="grid gap-2">
    //         <Label htmlFor="password">Password</Label>
    //         <Input id="password" type="password" name="password" required />
    //       </div>
    //     </CardContent>
    //     <CardFooter>
    //       {/* <Button className="w-full">Sign in</Button> */}
    //       <SubmitButton
    //         formAction={signIn}
    //         className="bg-green-700 rounded-md px-4 py-2 text-foreground mb-2"
    //         pendingText="Signing In..."
    //       >
    //         Sign In
    //       </SubmitButton>
    //     </CardFooter>
    //   </form>
    // </Card>
  )
}
